// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rrgmc/debefix-sample-app/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CommentStorage is an autogenerated mock type for the CommentStorage type
type CommentStorage struct {
	mock.Mock
}

type CommentStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentStorage) EXPECT() *CommentStorage_Expecter {
	return &CommentStorage_Expecter{mock: &_m.Mock}
}

// AddComment provides a mock function with given fields: ctx, comment
func (_m *CommentStorage) AddComment(ctx context.Context, comment entity.Comment) (entity.Comment, error) {
	ret := _m.Called(ctx, comment)

	var r0 entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Comment) (entity.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Comment) entity.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Get(0).(entity.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStorage_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type CommentStorage_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment entity.Comment
func (_e *CommentStorage_Expecter) AddComment(ctx interface{}, comment interface{}) *CommentStorage_AddComment_Call {
	return &CommentStorage_AddComment_Call{Call: _e.mock.On("AddComment", ctx, comment)}
}

func (_c *CommentStorage_AddComment_Call) Run(run func(ctx context.Context, comment entity.Comment)) *CommentStorage_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Comment))
	})
	return _c
}

func (_c *CommentStorage_AddComment_Call) Return(_a0 entity.Comment, _a1 error) *CommentStorage_AddComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentStorage_AddComment_Call) RunAndReturn(run func(context.Context, entity.Comment) (entity.Comment, error)) *CommentStorage_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCommentByID provides a mock function with given fields: ctx, commentID
func (_m *CommentStorage) DeleteCommentByID(ctx context.Context, commentID uuid.UUID) error {
	ret := _m.Called(ctx, commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentStorage_DeleteCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCommentByID'
type CommentStorage_DeleteCommentByID_Call struct {
	*mock.Call
}

// DeleteCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID uuid.UUID
func (_e *CommentStorage_Expecter) DeleteCommentByID(ctx interface{}, commentID interface{}) *CommentStorage_DeleteCommentByID_Call {
	return &CommentStorage_DeleteCommentByID_Call{Call: _e.mock.On("DeleteCommentByID", ctx, commentID)}
}

func (_c *CommentStorage_DeleteCommentByID_Call) Run(run func(ctx context.Context, commentID uuid.UUID)) *CommentStorage_DeleteCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CommentStorage_DeleteCommentByID_Call) Return(_a0 error) *CommentStorage_DeleteCommentByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentStorage_DeleteCommentByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *CommentStorage_DeleteCommentByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentByID provides a mock function with given fields: ctx, commentID
func (_m *CommentStorage) GetCommentByID(ctx context.Context, commentID uuid.UUID) (entity.Comment, error) {
	ret := _m.Called(ctx, commentID)

	var r0 entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Comment, error)); ok {
		return rf(ctx, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Comment); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Get(0).(entity.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStorage_GetCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentByID'
type CommentStorage_GetCommentByID_Call struct {
	*mock.Call
}

// GetCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID uuid.UUID
func (_e *CommentStorage_Expecter) GetCommentByID(ctx interface{}, commentID interface{}) *CommentStorage_GetCommentByID_Call {
	return &CommentStorage_GetCommentByID_Call{Call: _e.mock.On("GetCommentByID", ctx, commentID)}
}

func (_c *CommentStorage_GetCommentByID_Call) Run(run func(ctx context.Context, commentID uuid.UUID)) *CommentStorage_GetCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CommentStorage_GetCommentByID_Call) Return(_a0 entity.Comment, _a1 error) *CommentStorage_GetCommentByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentStorage_GetCommentByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entity.Comment, error)) *CommentStorage_GetCommentByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentList provides a mock function with given fields: ctx, filter
func (_m *CommentStorage) GetCommentList(ctx context.Context, filter entity.CommentFilter) ([]entity.Comment, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CommentFilter) ([]entity.Comment, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CommentFilter) []entity.Comment); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CommentFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStorage_GetCommentList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentList'
type CommentStorage_GetCommentList_Call struct {
	*mock.Call
}

// GetCommentList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.CommentFilter
func (_e *CommentStorage_Expecter) GetCommentList(ctx interface{}, filter interface{}) *CommentStorage_GetCommentList_Call {
	return &CommentStorage_GetCommentList_Call{Call: _e.mock.On("GetCommentList", ctx, filter)}
}

func (_c *CommentStorage_GetCommentList_Call) Run(run func(ctx context.Context, filter entity.CommentFilter)) *CommentStorage_GetCommentList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CommentFilter))
	})
	return _c
}

func (_c *CommentStorage_GetCommentList_Call) Return(_a0 []entity.Comment, _a1 error) *CommentStorage_GetCommentList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentStorage_GetCommentList_Call) RunAndReturn(run func(context.Context, entity.CommentFilter) ([]entity.Comment, error)) *CommentStorage_GetCommentList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCommentByID provides a mock function with given fields: ctx, commentID, comment
func (_m *CommentStorage) UpdateCommentByID(ctx context.Context, commentID uuid.UUID, comment entity.Comment) (entity.Comment, error) {
	ret := _m.Called(ctx, commentID, comment)

	var r0 entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Comment) (entity.Comment, error)); ok {
		return rf(ctx, commentID, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Comment) entity.Comment); ok {
		r0 = rf(ctx, commentID, comment)
	} else {
		r0 = ret.Get(0).(entity.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Comment) error); ok {
		r1 = rf(ctx, commentID, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStorage_UpdateCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCommentByID'
type CommentStorage_UpdateCommentByID_Call struct {
	*mock.Call
}

// UpdateCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID uuid.UUID
//   - comment entity.Comment
func (_e *CommentStorage_Expecter) UpdateCommentByID(ctx interface{}, commentID interface{}, comment interface{}) *CommentStorage_UpdateCommentByID_Call {
	return &CommentStorage_UpdateCommentByID_Call{Call: _e.mock.On("UpdateCommentByID", ctx, commentID, comment)}
}

func (_c *CommentStorage_UpdateCommentByID_Call) Run(run func(ctx context.Context, commentID uuid.UUID, comment entity.Comment)) *CommentStorage_UpdateCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.Comment))
	})
	return _c
}

func (_c *CommentStorage_UpdateCommentByID_Call) Return(_a0 entity.Comment, _a1 error) *CommentStorage_UpdateCommentByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentStorage_UpdateCommentByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.Comment) (entity.Comment, error)) *CommentStorage_UpdateCommentByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommentStorage creates a new instance of CommentStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentStorage {
	mock := &CommentStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
