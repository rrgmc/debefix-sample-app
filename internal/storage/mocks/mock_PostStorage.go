// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rrgmc/debefix-sample-app/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PostStorage is an autogenerated mock type for the PostStorage type
type PostStorage struct {
	mock.Mock
}

type PostStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *PostStorage) EXPECT() *PostStorage_Expecter {
	return &PostStorage_Expecter{mock: &_m.Mock}
}

// AddPost provides a mock function with given fields: ctx, post
func (_m *PostStorage) AddPost(ctx context.Context, post entity.Post) (entity.Post, error) {
	ret := _m.Called(ctx, post)

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Post) (entity.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Post) entity.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStorage_AddPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPost'
type PostStorage_AddPost_Call struct {
	*mock.Call
}

// AddPost is a helper method to define mock.On call
//   - ctx context.Context
//   - post entity.Post
func (_e *PostStorage_Expecter) AddPost(ctx interface{}, post interface{}) *PostStorage_AddPost_Call {
	return &PostStorage_AddPost_Call{Call: _e.mock.On("AddPost", ctx, post)}
}

func (_c *PostStorage_AddPost_Call) Run(run func(ctx context.Context, post entity.Post)) *PostStorage_AddPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Post))
	})
	return _c
}

func (_c *PostStorage_AddPost_Call) Return(_a0 entity.Post, _a1 error) *PostStorage_AddPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostStorage_AddPost_Call) RunAndReturn(run func(context.Context, entity.Post) (entity.Post, error)) *PostStorage_AddPost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePostByID provides a mock function with given fields: ctx, postID
func (_m *PostStorage) DeletePostByID(ctx context.Context, postID uuid.UUID) error {
	ret := _m.Called(ctx, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostStorage_DeletePostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePostByID'
type PostStorage_DeletePostByID_Call struct {
	*mock.Call
}

// DeletePostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
func (_e *PostStorage_Expecter) DeletePostByID(ctx interface{}, postID interface{}) *PostStorage_DeletePostByID_Call {
	return &PostStorage_DeletePostByID_Call{Call: _e.mock.On("DeletePostByID", ctx, postID)}
}

func (_c *PostStorage_DeletePostByID_Call) Run(run func(ctx context.Context, postID uuid.UUID)) *PostStorage_DeletePostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostStorage_DeletePostByID_Call) Return(_a0 error) *PostStorage_DeletePostByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostStorage_DeletePostByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *PostStorage_DeletePostByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, postID
func (_m *PostStorage) GetPostByID(ctx context.Context, postID uuid.UUID) (entity.Post, error) {
	ret := _m.Called(ctx, postID)

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Post, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Post); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStorage_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type PostStorage_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
func (_e *PostStorage_Expecter) GetPostByID(ctx interface{}, postID interface{}) *PostStorage_GetPostByID_Call {
	return &PostStorage_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, postID)}
}

func (_c *PostStorage_GetPostByID_Call) Run(run func(ctx context.Context, postID uuid.UUID)) *PostStorage_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostStorage_GetPostByID_Call) Return(_a0 entity.Post, _a1 error) *PostStorage_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostStorage_GetPostByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entity.Post, error)) *PostStorage_GetPostByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostList provides a mock function with given fields: ctx, filter
func (_m *PostStorage) GetPostList(ctx context.Context, filter entity.PostFilter) ([]entity.Post, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PostFilter) ([]entity.Post, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.PostFilter) []entity.Post); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.PostFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStorage_GetPostList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostList'
type PostStorage_GetPostList_Call struct {
	*mock.Call
}

// GetPostList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.PostFilter
func (_e *PostStorage_Expecter) GetPostList(ctx interface{}, filter interface{}) *PostStorage_GetPostList_Call {
	return &PostStorage_GetPostList_Call{Call: _e.mock.On("GetPostList", ctx, filter)}
}

func (_c *PostStorage_GetPostList_Call) Run(run func(ctx context.Context, filter entity.PostFilter)) *PostStorage_GetPostList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PostFilter))
	})
	return _c
}

func (_c *PostStorage_GetPostList_Call) Return(_a0 []entity.Post, _a1 error) *PostStorage_GetPostList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostStorage_GetPostList_Call) RunAndReturn(run func(context.Context, entity.PostFilter) ([]entity.Post, error)) *PostStorage_GetPostList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePostByID provides a mock function with given fields: ctx, postID, post
func (_m *PostStorage) UpdatePostByID(ctx context.Context, postID uuid.UUID, post entity.Post) (entity.Post, error) {
	ret := _m.Called(ctx, postID, post)

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Post) (entity.Post, error)); ok {
		return rf(ctx, postID, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Post) entity.Post); ok {
		r0 = rf(ctx, postID, post)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Post) error); ok {
		r1 = rf(ctx, postID, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStorage_UpdatePostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePostByID'
type PostStorage_UpdatePostByID_Call struct {
	*mock.Call
}

// UpdatePostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - post entity.Post
func (_e *PostStorage_Expecter) UpdatePostByID(ctx interface{}, postID interface{}, post interface{}) *PostStorage_UpdatePostByID_Call {
	return &PostStorage_UpdatePostByID_Call{Call: _e.mock.On("UpdatePostByID", ctx, postID, post)}
}

func (_c *PostStorage_UpdatePostByID_Call) Run(run func(ctx context.Context, postID uuid.UUID, post entity.Post)) *PostStorage_UpdatePostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.Post))
	})
	return _c
}

func (_c *PostStorage_UpdatePostByID_Call) Return(_a0 entity.Post, _a1 error) *PostStorage_UpdatePostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostStorage_UpdatePostByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.Post) (entity.Post, error)) *PostStorage_UpdatePostByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostStorage creates a new instance of PostStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostStorage {
	mock := &PostStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
