// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rrgmc/debefix-sample-app/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CountryStorage is an autogenerated mock type for the CountryStorage type
type CountryStorage struct {
	mock.Mock
}

type CountryStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *CountryStorage) EXPECT() *CountryStorage_Expecter {
	return &CountryStorage_Expecter{mock: &_m.Mock}
}

// GetCountryByID provides a mock function with given fields: ctx, CountryID
func (_m *CountryStorage) GetCountryByID(ctx context.Context, CountryID uuid.UUID) (entity.Country, error) {
	ret := _m.Called(ctx, CountryID)

	var r0 entity.Country
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Country, error)); ok {
		return rf(ctx, CountryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Country); ok {
		r0 = rf(ctx, CountryID)
	} else {
		r0 = ret.Get(0).(entity.Country)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, CountryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountryStorage_GetCountryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountryByID'
type CountryStorage_GetCountryByID_Call struct {
	*mock.Call
}

// GetCountryByID is a helper method to define mock.On call
//   - ctx context.Context
//   - CountryID uuid.UUID
func (_e *CountryStorage_Expecter) GetCountryByID(ctx interface{}, CountryID interface{}) *CountryStorage_GetCountryByID_Call {
	return &CountryStorage_GetCountryByID_Call{Call: _e.mock.On("GetCountryByID", ctx, CountryID)}
}

func (_c *CountryStorage_GetCountryByID_Call) Run(run func(ctx context.Context, CountryID uuid.UUID)) *CountryStorage_GetCountryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CountryStorage_GetCountryByID_Call) Return(_a0 entity.Country, _a1 error) *CountryStorage_GetCountryByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CountryStorage_GetCountryByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entity.Country, error)) *CountryStorage_GetCountryByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountryList provides a mock function with given fields: ctx, filter
func (_m *CountryStorage) GetCountryList(ctx context.Context, filter entity.CountryFilter) ([]entity.Country, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.Country
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CountryFilter) ([]entity.Country, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CountryFilter) []entity.Country); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Country)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CountryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountryStorage_GetCountryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountryList'
type CountryStorage_GetCountryList_Call struct {
	*mock.Call
}

// GetCountryList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.CountryFilter
func (_e *CountryStorage_Expecter) GetCountryList(ctx interface{}, filter interface{}) *CountryStorage_GetCountryList_Call {
	return &CountryStorage_GetCountryList_Call{Call: _e.mock.On("GetCountryList", ctx, filter)}
}

func (_c *CountryStorage_GetCountryList_Call) Run(run func(ctx context.Context, filter entity.CountryFilter)) *CountryStorage_GetCountryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CountryFilter))
	})
	return _c
}

func (_c *CountryStorage_GetCountryList_Call) Return(_a0 []entity.Country, _a1 error) *CountryStorage_GetCountryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CountryStorage_GetCountryList_Call) RunAndReturn(run func(context.Context, entity.CountryFilter) ([]entity.Country, error)) *CountryStorage_GetCountryList_Call {
	_c.Call.Return(run)
	return _c
}

// NewCountryStorage creates a new instance of CountryStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCountryStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CountryStorage {
	mock := &CountryStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
